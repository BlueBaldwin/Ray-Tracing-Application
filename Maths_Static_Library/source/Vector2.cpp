///////////////////////////////////////////////////////////////////////////////////////////////////////
// 
//	File:				Vector2.cpp
//	Author:				Scott Baldwin
//	Last Edited:		20-05-21
//	Brief:				A simple vector 2 class - Overloading opperators, Dot and Cross Product* TBA
//
///////////////////////////////////////////////////////////////////////////////////////////////////////

//\------------------------
//\ INCLUDES
//\------------------------
#include "Vector2.h"
//\------------------------

//\====================================================================================================
// -- CONSTRUCTORS / DESTRUCTORS
//\====================================================================================================

//\----------------------------------------------------------------------------------
//\ Default Constructor 
//\----------------------------------------------------------------------------------
Vector2::Vector2()
{
	x = 0.f; y = 0.f;											// Initialising the default constructor vakyes to zero
}
//\----------------------------------------------------------------------------------
//\ Constructor with X, Y Values
//\----------------------------------------------------------------------------------
Vector2::Vector2(float a_x, float a_y)
{
	x = a_x; y = a_y;											// Initialising the X and Y to their corrosponding arguments 
}
//\----------------------------------------------------------------------------------
//\ Copy Constructor
//\----------------------------------------------------------------------------------
Vector2::Vector2(const Vector2& a_v2)
{
	x = a_v2.x; 
	y = a_v2.y;
}
//\----------------------------------------------------------------------------------
//\ Destructor
//\----------------------------------------------------------------------------------
Vector2::~Vector2()
{
}

//\====================================================================================================
// -- OPERATOR OVERLOADS
//\====================================================================================================

//\----------------------------------------------------------------------------------
// //\ Assignment Operator
//\----------------------------------------------------------------------------------
Vector2& Vector2::operator =		(const Vector2& a_v2)
{
	if (this != &a_v2)			// Checking to make sure we aren't comparing two objects that are the same
	{
		x = a_v2.x;
		y = a_v2.y;
	}
	return *this;				
}
//\----------------------------------------------------------------------------------
//\ Overload Equivalance Operators
//\----------------------------------------------------------------------------------
bool	Vector2::operator ==		(const Vector2& a_v2)
{
	return (x == a_v2.x && y == a_v2.y);
}
bool	Vector2::operator !=		(const Vector2& a_v2)
{
	return (x != a_v2.x || y != a_v2.y);
}
//\----------------------------------------------------------------------------------
//\ Negate
//\----------------------------------------------------------------------------------
const Vector2 Vector2::operator - () const 
{
	return Vector2(-x, -y);
}
//\----------------------------------------------------------------------------------
//\ Addition + Subtraction -
//\----------------------------------------------------------------------------------
Vector2 Vector2::operator + (const Vector2& a_v2)const
{
	return Vector2(x + a_v2.x, y + a_v2.y);
}

//\====================================================================================================
// -- VECTOR 2 FUNCTIONALITY
//\====================================================================================================

//\----------------------------------------------------------------------------------
//\ Dot Product Functionality  
//\----------------------------------------------------------------------------------
float Vector2::Dot(const Vector2& a_v2) const
{
	return x * a_v2.x + y * a_v2.y;
}

float Dot(const Vector2& a_v2a, const Vector2& a_v2b)
{
	return a_v2a.x * a_v2b.x + a_v2a.y * a_v2b.y;
}
//\----------------------------------------------------------------------------------
//\ Min Method Functionality
//\----------------------------------------------------------------------------------
